<project xmlns:ivy="antlib:org.apache.ivy.ant" 
       name="dateUtilsProject" default="main" basedir=".">
    <description>
        Create a Java Project (JAR) with Ant build script
    </description>

    <property name="projectName" value="HelloWorld" />
    <property name="src.dir" location="src" />
    <property name="test.dir" location="src" />
    <property name="build.dir" location="build" />
    <property name="dist.dir" location="dist" />
    <property name="dist.lib.dir" location="dist/lib" />
    <property name="lib.dir" value="lib" />
    <property name="main-class" value="test.HelloWorld" />

    <!-- ivy start -->
    <!-- ivy to get dependencies and copy to project lib folder automatically -->
    <target name="resolveIvyDependencies" description="retrieve dependencies with ivy">
        <ivy:retrieve />
    </target>

    <!-- install ivy -->
    <target name="initIvy" description="Install ivy">
        <mkdir dir="${user.home}/.ant/lib" />
        <get dest="${user.home}/.ant/lib/ivy.jar" src="https://repo1.maven.org/maven2/org/apache/ivy/ivy/2.5.0-rc1/ivy-2.5.0-rc1.jar" />
    </target>
    <!-- ivy end -->

    <target name="init">
        <mkdir dir="${build.dir}" />
    </target>

    <!-- external libraries classpath, we don't need sources and javadoc -->
    <path id="classpath">
        <fileset dir="${basedir}/">
            <include name="${lib.dir}/*.jar" />
            <exclude name="${lib.dir}/*sources.jar"/>
            <exclude name="${lib.dir}/*javadoc.jar"/>
        </fileset>
    </path>

    <!-- To work with external libraries, need classpath to compile -->
    <target name="compile" depends="init" description="compile the source ">
        <javac includeantruntime="false" srcdir="${src.dir}" destdir="${build.dir}" classpathref="classpath" />
	<javac includeantruntime="false" srcdir="${test.dir}" destdir="${build.dir}" classpathref="classpath" />
    </target>

    <!-- constructs the external libraries classpath name -->
    <pathconvert property="classpath.name" pathsep=" ">
        <path refid="classpath" />
        <mapper>
            <chainedmapper>
                <flattenmapper />
                <globmapper from="*.jar" to="lib/*.jar" />
            </chainedmapper>
        </mapper>
    </pathconvert>

    <target name="copy-dependencies">
        <copy todir="${dist.lib.dir}">
            <fileset dir="${lib.dir}" includes="**/*.jar" excludes="**/*sources.jar, **/*javadoc.jar" />
        </copy>
    </target>

    <!-- jar it, and declares the ext libraries in manifest.mf file -->
    <target name="jar" depends="compile, copy-dependencies" description="package, output to JAR">

        <echo message="classpath.name : ${classpath.name} " />

        <mkdir dir="${dist.dir}" />
        <mkdir dir="${dist.lib.dir}" />

        <jar jarfile="${dist.dir}/${projectName}.jar" basedir="${build.dir}">
            <manifest>
                <attribute name="Main-Class" value="${main-class}" />
                <attribute name="Class-Path" value="${classpath.name}" />
            </manifest>
        </jar>
    </target>

    <target name="clean" description="clean up">
        <delete dir="${build.dir}" />
        <delete dir="${dist.dir}" />
    </target>
	
    <target name="run">
        <java jar="${dist.dir}/HelloWorld.jar" fork="true"/>
    </target>

    <!-- Default, run this -->
    <target name="main" depends="clean, compile, jar" />
	
	
    <target name="runTests">  
        <junit printsummary="yes" fork="yes" haltonfailure="yes">  
            <formatter type="plain"/>  
	    <classpath refid="classpath" />
            <classpath location="${build.dir}" />           
            <classpath location="lib/junit-4.13.2.jar" />
		
            <test name="test.HelloWorldTest"/>  
        </junit>  
    </target>  
	

</project>
